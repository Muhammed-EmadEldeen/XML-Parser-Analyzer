


#include <iostream>
#include <fstream>
#include <sstream>
#include <stack>
#include <string>
#include <regex>

using namespace std;

struct XmlTag {
    string tagName;
    int lineNumber;
    XmlTag(const string& name, int line) : tagName(name), lineNumber(line) {}
};

stack<pair<string, int>> readXmlTagsWithLineNumbers(const string& filename) {
    stack<XmlTag> tempStack;
    stack<pair<string, int>> resultStack;
    ifstream file(filename);

    if (!file.is_open()) {
        throw runtime_error("Failed to open file: " + filename);
    }

    string line;
    int lineNumber = 0;
    regex tagRegex("<([a-zA-Z0-9:_-]+)(\\s[^>]*)?>|</([a-zA-Z0-9:_-]+)>|<!\\[CDATA\\[(.*?)\\]\]>|<!--(.*?)-->");
    smatch match;

    while (getline(file, line)) {
        lineNumber++;

        string::const_iterator searchStart(line.cbegin());
        while (regex_search(searchStart, line.cend(), match, tagRegex)) {
            if (match[1].matched) {
                tempStack.emplace(XmlTag(match[1].str(), lineNumber));
            }
            searchStart = match.suffix().first;
        }
    }

    file.close();

    while (!tempStack.empty()) {
        const XmlTag& tag = tempStack.top();
        resultStack.emplace(tag.tagName, tag.lineNumber);
        tempStack.pop();
    }

    return resultStack;
}


